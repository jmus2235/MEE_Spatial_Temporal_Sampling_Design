Greg Wirth 2018 - Cloud Free Days ProbabilityÂ¶
Given a probability P that a site has a cloud-free day, this program will determine the probability of getting N cloud-free days in a sample of M sampling dates.

In [1]:

import numpy as np
In [2]:
p = 0.1
m = 1000
nTrials = 10
s = np.random.binomial( m, p, nTrials)
print s
[124  93  95 101  97 109 115  98 112 106]
In [3]:
p = 0.5
m = 10
n = 5
s = np.random.binomial( m, p, nTrials)
buf = np.where( s >= n)
nGood = len(buf[0])
print nGood, nTrials
6 10

Analytic Approach

If P represents the percent of days with 0-10% cloud cover (>90% cloud-fee) over a given time period, and N the minimum number of flight days required to cover the site, then the formula is (1/P) x N, rounded up.

In [4]:

print "Number of flight days required to get n good survey days given likelihood p of clear weather\n"

print "p",
for n in range( 1, 10):
    print "\tn=%d" % n,
print
    
for p in np.arange(0.05, 1.01, 0.05):
    print "%.2f" % p,
    for n in range( 1, 10):
        m = (1./p) * n
        print "\t%.1f" % m,
    print

Number of flight days required to get n good survey days given likelihood p of clear weather

p 	n=1 	n=2 	n=3 	n=4 	n=5 	n=6 	n=7 	n=8 	n=9
0.05 	20.0 	40.0 	60.0 	80.0 	100.0 	120.0 	140.0 	160.0 	180.0
0.10 	10.0 	20.0 	30.0 	40.0 	50.0 	60.0 	70.0 	80.0 	90.0
0.15 	6.7 	13.3 	20.0 	26.7 	33.3 	40.0 	46.7 	53.3 	60.0
0.20 	5.0 	10.0 	15.0 	20.0 	25.0 	30.0 	35.0 	40.0 	45.0
0.25 	4.0 	8.0 	12.0 	16.0 	20.0 	24.0 	28.0 	32.0 	36.0
0.30 	3.3 	6.7 	10.0 	13.3 	16.7 	20.0 	23.3 	26.7 	30.0
0.35 	2.9 	5.7 	8.6 	11.4 	14.3 	17.1 	20.0 	22.9 	25.7
0.40 	2.5 	5.0 	7.5 	10.0 	12.5 	15.0 	17.5 	20.0 	22.5
0.45 	2.2 	4.4 	6.7 	8.9 	11.1 	13.3 	15.6 	17.8 	20.0
0.50 	2.0 	4.0 	6.0 	8.0 	10.0 	12.0 	14.0 	16.0 	18.0
0.55 	1.8 	3.6 	5.5 	7.3 	9.1 	10.9 	12.7 	14.5 	16.4
0.60 	1.7 	3.3 	5.0 	6.7 	8.3 	10.0 	11.7 	13.3 	15.0
0.65 	1.5 	3.1 	4.6 	6.2 	7.7 	9.2 	10.8 	12.3 	13.8
0.70 	1.4 	2.9 	4.3 	5.7 	7.1 	8.6 	10.0 	11.4 	12.9
0.75 	1.3 	2.7 	4.0 	5.3 	6.7 	8.0 	9.3 	10.7 	12.0
0.80 	1.2 	2.5 	3.8 	5.0 	6.2 	7.5 	8.8 	10.0 	11.2
0.85 	1.2 	2.4 	3.5 	4.7 	5.9 	7.1 	8.2 	9.4 	10.6
0.90 	1.1 	2.2 	3.3 	4.4 	5.6 	6.7 	7.8 	8.9 	10.0
0.95 	1.1 	2.1 	3.2 	4.2 	5.3 	6.3 	7.4 	8.4 	9.5
1.00 	1.0 	2.0 	3.0 	4.0 	5.0 	6.0 	7.0 	8.0 	9.0

Simulation Approach

In [5]:

def probCloudFree( p, n, m, nTrials=10000):
    '''
    Given a probability P that a site has a cloud-free day, 
    this program will determine the probability of getting 
    N cloud-free days in a sample of M sampling dates.
    '''
    
    # generate trials...
    s = np.random.binomial( m, p, nTrials)
    
    # count the fraction that achieve at least n clear days...
    buf = np.where( s >= n)
    nGood = len(buf[0])
    
    goodFraction = float(nGood) / float(nTrials)
    return goodFraction

In [6]:

n = 2
print "Probability of getting %d clear days in a sample of m given likelihood p of clear weather\n" % n

print "p",
for m in range( 1, 10):
    print "\tm=%d" % m,
print
    
for p in np.arange(0.0, 1.0, 0.05):
    print "%.2f" % p,
    for m in range( 1, 10):
        f = probCloudFree( p, n, m)
        print "\t%.2f" % f,
    print

Probability of getting 2 clear days in a sample of m given likelihood p of clear weather

p 	m=1 	m=2 	m=3 	m=4 	m=5 	m=6 	m=7 	m=8 	m=9
0.00 	0.00 	0.00 	0.00 	0.00 	0.00 	0.00 	0.00 	0.00 	0.00
0.05 	0.00 	0.00 	0.01 	0.01 	0.02 	0.04 	0.05 	0.06 	0.07
0.10 	0.00 	0.01 	0.03 	0.05 	0.09 	0.11 	0.15 	0.18 	0.23
0.15 	0.00 	0.02 	0.06 	0.11 	0.16 	0.23 	0.28 	0.35 	0.41
0.20 	0.00 	0.04 	0.10 	0.18 	0.26 	0.35 	0.41 	0.49 	0.57
0.25 	0.00 	0.06 	0.16 	0.26 	0.37 	0.46 	0.56 	0.64 	0.69
0.30 	0.00 	0.09 	0.21 	0.35 	0.47 	0.58 	0.67 	0.74 	0.80
0.35 	0.00 	0.12 	0.28 	0.43 	0.58 	0.69 	0.76 	0.84 	0.88
0.40 	0.00 	0.16 	0.35 	0.52 	0.67 	0.76 	0.84 	0.89 	0.93
0.45 	0.00 	0.21 	0.43 	0.61 	0.74 	0.84 	0.90 	0.94 	0.96
0.50 	0.00 	0.26 	0.49 	0.68 	0.81 	0.89 	0.94 	0.97 	0.98
0.55 	0.00 	0.30 	0.57 	0.76 	0.87 	0.93 	0.96 	0.98 	0.99
0.60 	0.00 	0.37 	0.64 	0.82 	0.92 	0.96 	0.98 	0.99 	1.00
0.65 	0.00 	0.42 	0.72 	0.87 	0.95 	0.98 	0.99 	1.00 	1.00
0.70 	0.00 	0.50 	0.79 	0.92 	0.97 	0.99 	1.00 	1.00 	1.00
0.75 	0.00 	0.57 	0.84 	0.95 	0.98 	1.00 	1.00 	1.00 	1.00
0.80 	0.00 	0.64 	0.90 	0.97 	0.99 	1.00 	1.00 	1.00 	1.00
0.85 	0.00 	0.72 	0.94 	0.99 	1.00 	1.00 	1.00 	1.00 	1.00
0.90 	0.00 	0.81 	0.97 	1.00 	1.00 	1.00 	1.00 	1.00 	1.00
0.95 	0.00 	0.91 	0.99 	1.00 	1.00 	1.00 	1.00 	1.00 	1.00

In [7]:

def minDays( p, n, c):
    '''
    Given a probability P that a site has a cloud-free day,
    a number n of clear days to survey the site,
    and a confidence level c that we will get that number of 
    clear days, this routine will return m, the number of days 
    we need to fly AOP at the site.
    '''
    
    mMax = 100
    for m in range(mMax):
        f = probCloudFree( p, n, m)
        if f > c:
            return m
    
    # if we got here, no solution...
    return None

Case 1: 50% confidence

In [8]:

c = 0.5
c100 = c * 100.
print "Number of flight days required to have a %d%% chance that we get \nn good survey days given likelihood p of clear weather\n" % c100

print "p",
for n in range( 1, 10):
    print "\tn=%d" % n,
print
    
for p in np.arange(0.05, 1.01, 0.05):
    print "%.2f" % p,
    for n in range( 1, 10):
        m = minDays( p, n, c)
        print "\t", m,
    print

Number of flight days required to have a 50% chance that we get 
n good survey days given likelihood p of clear weather

p 	n=1 	n=2 	n=3 	n=4 	n=5 	n=6 	n=7 	n=8 	n=9
0.05 	14 	34 	54 	74 	94 	None 	None 	None 	None
0.10 	7 	17 	27 	37 	47 	57 	67 	77 	87
0.15 	5 	11 	18 	25 	31 	38 	45 	51 	58
0.20 	4 	8 	13 	19 	23 	29 	33 	38 	44
0.25 	3 	7 	11 	15 	19 	23 	27 	31 	35
0.30 	2 	6 	9 	12 	16 	19 	22 	26 	29
0.35 	2 	5 	8 	11 	14 	16 	19 	22 	25
0.40 	2 	4 	7 	9 	12 	14 	17 	19 	22
0.45 	2 	4 	6 	8 	11 	13 	15 	17 	19
0.50 	1 	4 	6 	8 	10 	12 	13 	16 	17
0.55 	1 	3 	5 	7 	9 	10 	12 	14 	16
0.60 	1 	3 	5 	6 	8 	10 	11 	13 	15
0.65 	1 	3 	4 	6 	7 	9 	10 	12 	14
0.70 	1 	3 	4 	5 	7 	8 	10 	11 	13
0.75 	1 	2 	4 	5 	6 	8 	9 	10 	12
0.80 	1 	2 	3 	5 	6 	7 	9 	10 	11
0.85 	1 	2 	3 	4 	6 	7 	8 	9 	10
0.90 	1 	2 	3 	4 	5 	6 	8 	9 	10
0.95 	1 	2 	3 	4 	5 	6 	7 	8 	9
1.00 	1 	2 	3 	4 	5 	6 	7 	8 	9

Case 2: 62.5% confidence

In [9]:

c = 0.625
c100 = c * 100.
print "Number of flight days required to have a %d%% chance that we get \nn good survey days given likelihood p of clear weather\n" % c100

print "p",
for n in range( 1, 10):
    print "\tn=%d" % n,
print
    
for p in np.arange(0.05, 1.01, 0.05):
    print "%.2f" % p,
    for n in range( 1, 10):
        m = minDays( p, n, c)
        print "\t", m,
    print

Number of flight days required to have a 62% chance that we get 
n good survey days given likelihood p of clear weather

p 	n=1 	n=2 	n=3 	n=4 	n=5 	n=6 	n=7 	n=8 	n=9
0.05 	19 	43 	64 	86 	None 	None 	None 	None 	None
0.10 	10 	21 	32 	43 	54 	65 	76 	85 	96
0.15 	7 	14 	21 	29 	36 	43 	50 	57 	64
0.20 	5 	11 	16 	21 	27 	32 	37 	42 	48
0.25 	4 	8 	13 	17 	21 	26 	30 	34 	38
0.30 	3 	7 	11 	14 	18 	21 	25 	28 	32
0.35 	3 	6 	9 	12 	15 	18 	21 	24 	27
0.40 	2 	5 	8 	11 	13 	16 	18 	21 	24
0.45 	2 	5 	7 	9 	12 	14 	16 	19 	21
0.50 	2 	4 	6 	8 	10 	13 	15 	17 	19
0.55 	2 	4 	6 	8 	10 	11 	13 	15 	17
0.60 	2 	3 	5 	7 	9 	10 	12 	14 	16
0.65 	1 	3 	5 	6 	8 	10 	11 	13 	14
0.70 	1 	3 	4 	6 	7 	9 	10 	12 	13
0.75 	1 	3 	4 	5 	7 	8 	10 	11 	12
0.80 	1 	2 	4 	5 	6 	8 	9 	10 	12
0.85 	1 	2 	4 	5 	6 	7 	8 	10 	11
0.90 	1 	2 	3 	4 	6 	7 	8 	9 	10
0.95 	1 	2 	3 	4 	5 	6 	7 	8 	9
1.00 	1 	2 	3 	4 	5 	6 	7 	8 	9

Case 3: 75% confidence

In [10]:

c = 0.75
c100 = c * 100.
print "Number of flight days required to have a %d%% chance that we get \nn good survey days given likelihood p of clear weather\n" % c100

print "p",
for n in range( 1, 10):
    print "\tn=%d" % n,
print
    
for p in np.arange(0.05, 1.01, 0.05):
    print "%.2f" % p,
    for n in range( 1, 10):
        m = minDays( p, n, c)
        print "\t", m,
    print

Number of flight days required to have a 75% chance that we get 
n good survey days given likelihood p of clear weather

p 	n=1 	n=2 	n=3 	n=4 	n=5 	n=6 	n=7 	n=8 	n=9
0.05 	28 	53 	78 	None 	None 	None 	None 	None 	None
0.10 	14 	27 	39 	50 	62 	73 	85 	96 	None
0.15 	9 	17 	25 	34 	41 	49 	57 	64 	71
0.20 	7 	13 	19 	25 	31 	36 	42 	48 	53
0.25 	5 	10 	15 	20 	25 	29 	33 	38 	42
0.30 	4 	9 	13 	16 	20 	24 	28 	31 	35
0.35 	4 	7 	11 	14 	17 	20 	24 	27 	30
0.40 	3 	6 	9 	12 	15 	18 	20 	23 	26
0.45 	3 	6 	8 	11 	13 	16 	18 	21 	23
0.50 	2 	5 	7 	10 	12 	14 	16 	18 	20
0.55 	2 	4 	7 	9 	11 	13 	15 	17 	19
0.60 	2 	4 	6 	8 	10 	12 	13 	15 	17
0.65 	2 	4 	5 	7 	9 	10 	12 	14 	15
0.70 	2 	3 	5 	7 	8 	10 	11 	13 	14
0.75 	1 	3 	5 	6 	7 	9 	10 	12 	13
0.80 	1 	3 	4 	6 	7 	8 	10 	11 	12
0.85 	1 	3 	4 	5 	6 	8 	9 	10 	11
0.90 	1 	2 	4 	5 	6 	7 	8 	9 	11
0.95 	1 	2 	3 	4 	5 	7 	8 	9 	10
1.00 	1 	2 	3 	4 	5 	6 	7 	8 	9

Case 4: 80% confidence

In [14]:

c = 0.8
c100 = c * 100.
print "Number of flight days required to have a %d%% chance that we get \nn good survey days given likelihood p of clear weather\n" % c100

print "p",
for n in range( 1, 10):
    print "\tn=%d" % n,
print
    
for p in np.arange(0.05, 1.01, 0.05):
    print "%.2f" % p,
    for n in range( 1, 10):
        m = minDays( p, n, c)
        print "\t", m,
    print

Number of flight days required to have a 80% chance that we get 
n good survey days given likelihood p of clear weather

p 	n=1 	n=2 	n=3 	n=4 	n=5 	n=6 	n=7 	n=8 	n=9
0.05 	31 	59 	85 	None 	None 	None 	None 	None 	None
0.10 	16 	29 	42 	54 	66 	79 	89 	None 	None
0.15 	10 	19 	28 	36 	44 	52 	60 	67 	74
0.20 	8 	14 	21 	27 	33 	39 	44 	50 	56
0.25 	6 	11 	17 	21 	26 	31 	35 	40 	44
0.30 	5 	9 	14 	18 	22 	25 	29 	33 	37
0.35 	4 	8 	12 	15 	18 	21 	25 	28 	31
0.40 	4 	7 	10 	13 	16 	19 	22 	24 	27
0.45 	3 	6 	9 	11 	14 	16 	19 	22 	24
0.50 	3 	5 	8 	10 	12 	15 	17 	19 	21
0.55 	3 	5 	7 	9 	11 	13 	15 	17 	19
0.60 	2 	4 	6 	8 	10 	12 	14 	16 	18
0.65 	2 	4 	6 	8 	9 	11 	13 	14 	16
0.70 	2 	4 	5 	7 	8 	10 	12 	13 	15
0.75 	2 	3 	5 	6 	8 	9 	11 	12 	14
0.80 	1 	3 	4 	6 	7 	9 	10 	11 	13
0.85 	1 	3 	4 	5 	7 	8 	9 	10 	12
0.90 	1 	2 	4 	5 	6 	7 	8 	10 	11
0.95 	1 	2 	3 	4 	6 	7 	8 	9 	10
1.00 	1 	2 	3 	4 	5 	6 	7 	8 	9

Case 5: 90% confidence

In [12]:

c = 0.9
c100 = c * 100.
print "Number of flight days required to have a %d%% chance that we get \nn good survey days given likelihood p of clear weather\n" % c100

print "p",
for n in range( 1, 10):
    print "\tn=%d" % n,
print
    
for p in np.arange(0.05, 1.01, 0.05):
    print "%.2f" % p,
    for n in range( 1, 10):
        m = minDays( p, n, c)
        print "\t", m,
    print

Number of flight days required to have a 90% chance that we get 
n good survey days given likelihood p of clear weather

p 	n=1 	n=2 	n=3 	n=4 	n=5 	n=6 	n=7 	n=8 	n=9
0.05 	46 	77 	None 	None 	None 	None 	None 	None 	None
0.10 	22 	38 	51 	66 	79 	91 	None 	None 	None
0.15 	15 	26 	34 	43 	52 	59 	69 	77 	85
0.20 	11 	19 	25 	32 	39 	44 	51 	56 	64
0.25 	8 	15 	20 	25 	30 	35 	40 	45 	50
0.30 	7 	12 	16 	21 	25 	29 	33 	37 	41
0.35 	6 	10 	14 	18 	21 	25 	28 	32 	35
0.40 	5 	9 	12 	15 	18 	22 	24 	27 	30
0.45 	4 	8 	11 	13 	16 	19 	21 	24 	27
0.50 	4 	7 	9 	12 	14 	17 	19 	21 	24
0.55 	3 	6 	8 	11 	13 	15 	17 	19 	21
0.60 	3 	5 	7 	9 	11 	13 	15 	17 	19
0.65 	3 	5 	7 	9 	10 	12 	14 	16 	17
0.70 	2 	4 	6 	8 	9 	11 	13 	14 	16
0.75 	2 	4 	6 	7 	9 	10 	12 	13 	15
0.80 	2 	3 	5 	6 	8 	9 	11 	12 	13
0.85 	2 	3 	5 	6 	7 	9 	10 	11 	12
0.90 	1 	3 	4 	5 	7 	8 	9 	10 	11
0.95 	1 	2 	4 	5 	6 	7 	8 	9 	10
1.00 	1 	2 	3 	4 	5 	6 	7 	8 	9

Case 6: 99% confidence

In [13]:

c = 0.99
c100 = c * 100.
print "Number of flight days required to have a %d%% chance that we get \nn good survey days given likelihood p of clear weather\n" % c100

print "p",
for n in range( 1, 10):
    print "\tn=%d" % n,
print
    
for p in np.arange(0.05, 1.01, 0.05):
    print "%.2f" % p,
    for n in range( 1, 10):
        m = minDays( p, n, c)
        print "\t", m,
    print

Number of flight days required to have a 99% chance that we get 
n good survey days given likelihood p of clear weather

p 	n=1 	n=2 	n=3 	n=4 	n=5 	n=6 	n=7 	n=8 	n=9
0.05 	90 	None 	None 	None 	None 	None 	None 	None 	None
0.10 	44 	62 	81 	96 	None 	None 	None 	None 	None
0.15 	30 	42 	52 	62 	73 	83 	92 	None 	None
0.20 	21 	31 	39 	48 	55 	62 	68 	76 	83
0.25 	17 	24 	31 	37 	42 	49 	55 	61 	65
0.30 	13 	19 	25 	30 	35 	40 	44 	49 	54
0.35 	11 	16 	21 	26 	30 	34 	37 	41 	46
0.40 	9 	14 	18 	22 	26 	29 	32 	35 	40
0.45 	8 	12 	16 	19 	22 	26 	28 	31 	34
0.50 	7 	10 	14 	16 	20 	22 	25 	27 	30
0.55 	6 	9 	12 	15 	17 	20 	22 	24 	27
0.60 	6 	8 	11 	13 	15 	17 	20 	22 	24
0.65 	5 	8 	10 	12 	14 	16 	18 	20 	22
0.70 	4 	6 	9 	11 	13 	14 	16 	18 	20
0.75 	4 	6 	8 	9 	11 	13 	14 	16 	18
0.80 	3 	5 	7 	8 	10 	12 	13 	14 	16
0.85 	3 	5 	6 	8 	9 	10 	12 	13 	15
0.90 	3 	4 	5 	7 	8 	9 	11 	12 	13
0.95 	2 	3 	5 	6 	7 	8 	9 	11 	12
1.00 	1 	2 	3 	4 	5 	6 	7 	8 	9

